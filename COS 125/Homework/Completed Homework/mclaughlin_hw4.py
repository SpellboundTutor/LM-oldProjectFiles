# HW4 Starter file
# You should use this file to start your homework 4 submission.

###############################################################################
# DO NOT MODIFY THIS LIST
data=[
	('b',2.6),('b',2.9),('b',3.1),('c',1.9),('e',2.4),('a',1.4),('c',1.8),('c',2.1),('a',1.5),('d',2.2),('f',3.1),('d',3.1),('d',3.2),('a',1.7),('f',3.4),('a',1.2),('b',3.0),('a',1.4),('b',2.4),('c',1.6),('e',2.1),('e',2.3),('f',3.0),('f',3.6),('b',2.1),('b',1.9),('a',1.4),('a',1.4),('c',1.3),('c',1.4),('d',2.4),('c',1.7),('d',3.0),('b',2.2),('f',2.4),('e',2.3),('c',1.6),('a',1.3),('b',2.7),('a',1.3),('a',1.5),('d',3.0),('e',2.2),('e',2.6),('e',1.6),('a',1.7),('e',1.6),('b',3.0),('c',1.9),('f',2.6),
	('b',2.2),('b',2.3),('b',2.8),('b',2.1),('d',1.2),('b',2.1),('e',2.3),('b',2.9),('a',1.3),('e',1.8),('b',2.2),('c',1.5),('f',2.0),('b',2.0),('e',2.5),('d',1.2),('c',1.9),('a',1.2),('b',2.3),('a',1.6),('f',2.4),('a',1.2),('d',2.9),('d',2.9),('b',2.6),('a',1.7),('f',1.4),('b',3.0),('e',1.9),('c',1.4),('a',1.4),('f',3.6),('b',2.6),('d',2.6),('b',2.6),('f',3.5),('a',1.4),('b',2.6),('a',1.5),('f',3.7),('c',1.3),('a',1.6),('b',3.0),('e',2.4),('c',1.1),('f',1.3),('b',3.2),('b',2.2),('a',1.6),('b',2.8),
	('d',2.4),('b',2.6),('f',1.2),('b',2.5),('c',1.5),('c',1.6),('e',1.7),('f',1.1),('a',1.2),('b',2.5),('a',1.4),('c',1.5),('b',2.0),('e',2.0),('e',2.4),('a',1.3),('d',2.0),('c',1.6),('d',2.9),('c',2.1),('c',1.4),('f',2.9),('c',1.6),('e',2.6),('e',1.7),('d',3.2),('e',2.2),('a',1.2),('e',1.6),('c',1.6),('c',1.0),('d',1.3),('e',2.6),('c',2.1),('b',2.0),('e',1.8),('a',1.3),('e',1.5),('c',1.8),('c',1.6),('c',1.7),('e',1.5),('e',1.7),('b',2.4),('e',1.7),('d',1.1),('c',1.1),('a',1.4),('b',2.8),('d',1.2),
	('a',1.5),('b',2.5),('f',1.7),('d',1.3),('c',1.8),('d',1.1),('e',2.6),('a',1.5),('d',2.0),('c',1.6),('f',3.2),('e',1.7),('e',1.6),('a',1.4),('a',1.4),('c',1.1),('b',3.1),('e',2.2),('e',1.7),('b',2.7),('b',2.5),('a',1.2),('a',1.5),('c',1.6),('a',1.2),('b',2.3),('f',3.6),('e',2.2),('b',3.0),('f',1.3),('d',2.6),('a',1.2),('f',3.1),('b',2.3),('d',3.0),('a',1.5),('d',3.3),('b',2.9),('a',1.7),('e',2.5),('c',2.0),('c',1.3),('c',1.9),('d',3.1),('d',2.4),('c',1.3),('d',2.1),('e',2.6),('f',3.5),('e',2.4),
	('a',1.4),('b',2.4),('e',2.6),('b',2.5),('c',1.8),('f',1.3),('d',1.9),('c',1.1),('c',1.7),('c',1.0),('a',1.3),('a',1.6),('d',1.6),('c',1.8),('c',1.6),('f',1.1),('b',2.4),('c',1.8),('a',1.1),('a',1.1),('a',1.3),('b',2.7),('e',1.6),('c',1.6),('a',1.2),('a',1.5),('e',2.5),('f',3.4),('e',2.1),('a',1.4),('c',1.1),('a',1.6),('e',2.4),('b',2.9),('a',1.4),('a',1.6),('f',1.8),('d',2.9),('f',3.2),('e',2.3),('a',1.1),('b',2.0),('e',1.7),('c',1.7),('c',2.0),('d',1.1),('e',1.9),('e',1.5),('e',2.2),('a',1.6),
	('b',2.6),('d',1.1),('e',2.0),('e',2.4),('f',1.6),('f',1.8),('b',1.9),('b',2.6),('a',1.5),('f',3.5),('b',2.3),('e',1.7),('b',2.8),('e',1.8),('a',1.4),('b',2.3),('e',1.8),('c',1.4),('d',2.3),('c',1.4),('c',1.4),('e',2.5),('a',1.4),('d',2.5),('d',2.7),('f',1.4),('d',1.1),('d',2.4),('d',3.0),('a',1.5),('e',1.8),('d',3.2),('a',1.4),('b',2.9),('e',1.4),('a',1.6),('f',2.6),('f',1.9),('f',1.2),('e',2.3),('b',2.3),('e',2.3),('c',1.9),('c',1.4),('b',2.4),('c',1.3),('e',2.5),('f',3.2),('d',1.1),('c',1.4),
	('e',1.8),('e',1.9),('e',1.8),('e',1.4),('a',1.2),('e',1.5),('f',2.1),('b',2.7),('e',2.3),('c',1.3),('f',1.6),('f',2.9),('f',2.2),('d',1.4),('d',1.4),('a',1.5),('b',2.8),('a',1.5),('a',1.5),('f',2.0),('b',2.6),('b',2.5),('d',1.5),('e',2.2),('a',1.2),('c',1.2),('e',1.7),('e',2.1),('e',2.0),('a',1.3),('d',1.5),('e',2.6),('c',1.5),('c',1.4),('e',2.2),('c',1.1),('d',2.6),('c',1.8),('d',2.0),('d',2.6),('d',1.7),('e',1.4),('a',1.2),('d',2.4),('e',1.5),('b',2.5),('b',2.9),('b',2.6),('d',1.3),('c',1.6),
	('e',1.5),('e',2.2),('f',2.2),('d',2.5),('b',2.5),('f',1.4),('b',2.9),('f',2.8),('b',2.1),('b',3.2),('f',2.2),('b',3.2),('e',2.6),('b',3.0),('f',3.6),('c',1.0),('f',1.2),('a',1.4),('e',1.8),('a',1.2),('d',1.3),('d',3.2),('f',1.3),('d',1.8),('b',1.9),('b',2.5),('f',1.3),('c',1.7),('c',1.4),('c',1.6),('e',2.1),('c',1.3),('a',1.1),('b',2.4),('d',3.2),('c',1.2),('e',2.4),('c',2.1),('e',1.7),('c',1.4),('f',1.6),('b',2.4),('c',2.0),('a',1.1),('f',2.1),('d',2.1),('e',1.9),('c',1.4),('d',1.4),('b',2.5),
	('b',2.5),('b',2.2),('d',3.4),('f',1.1),('a',1.2),('e',2.4),('c',1.5),('c',2.0),('b',2.2),('f',2.5),('e',2.0),('c',1.9),('e',1.6),('d',1.7),('f',2.5),('b',2.8),('a',1.3),('b',2.5),('b',2.6),('b',2.2),('a',1.3),('c',1.3),('f',2.6),('a',1.3),('b',2.7),('e',2.2),('c',2.0),('c',1.8),('b',2.7),('a',1.6),('a',1.1),('b',3.0),('d',2.0),('d',1.7),('a',1.4),('a',1.3),('a',1.3),('f',1.6),('e',1.7),('f',1.1),('c',1.7),('e',1.8),('e',2.4),('c',2.0),('f',2.4),('b',3.0),('e',2.7),('a',1.4),('a',1.7),('f',1.5),
	('c',1.0),('e',1.6),('d',2.9),('a',1.4),('b',2.5),('a',1.7),('b',2.5),('c',1.9),('e',1.5),('e',2.5),('d',1.8),('f',2.3),('b',2.4),('f',3.5),('e',1.5),('b',2.0),('b',2.3),('f',2.2),('a',1.6),('a',1.7),('a',1.2),('e',1.9),('d',2.9),('f',2.8),('c',1.4),('a',1.7),('b',2.5),('f',2.5),('f',3.1),('a',1.1),('d',2.6),('f',1.9),('a',1.2),('b',2.9),('b',2.3),('d',1.7),('c',2.0),('b',3.1),('c',1.2),('b',2.1),('b',2.9),('d',2.1),('a',1.4),('b',2.5),('a',1.4),('f',1.3),('b',2.1),('d',1.1),('e',2.6),('b',2.9),
	('e',1.9),('b',3.0),('f',1.6),('b',2.5),('f',3.3),('a',1.1),('c',1.3),('c',1.1),('d',2.3),('b',2.0),('c',1.6),('e',2.5),('d',2.3),('f',2.8),('f',2.1),('a',1.1),('b',1.9),('a',1.2),('f',1.8),('c',1.4),('b',2.5),('c',1.3),('b',3.0),('f',2.6),('f',1.0),('d',2.4),('d',2.6),('e',1.9),('e',2.6),('e',2.4),('c',2.1),('e',1.7),('c',1.6),('d',2.8),('d',1.9),('c',1.7),('e',1.6),('f',1.9),('c',1.1),('a',1.3),('f',1.7),('d',3.1),('f',3.1),('d',3.3),('c',1.9),('f',1.3),('b',3.0),('b',2.8),('e',2.2),('f',1.3),
	('a',1.5),('e',2.2),('b',2.4),('a',1.3),('d',2.1),('f',3.5),('b',2.2),('f',2.2),('b',2.7),('f',1.6),('f',2.6),('f',1.4),('a',1.5),('c',1.2),('f',2.7),('e',1.8),('f',1.7),('c',1.9),('d',2.0),('d',2.8),('a',1.6),('e',2.1),('e',2.2),('b',2.6),('e',2.1),('e',1.8),('e',1.4),('e',1.4),('c',1.8),('e',2.2),('f',2.4),('a',1.6),('a',1.6),('c',1.8),('a',1.2),('a',1.1),('b',2.7),('e',2.6),('b',2.4),('e',2.6),('e',1.8),('b',2.8),('d',3.3),('d',3.3),('c',1.6),('d',1.6),('e',2.6),('b',2.2),('a',1.1),('c',1.4),
	('d',2.4),('c',1.5),('e',2.1),('c',1.4),('e',2.0),('d',2.0),('f',2.6),('b',1.9),('f',2.6),('e',2.2),('c',1.7),('b',2.1),('f',1.7),('d',2.6),('f',3.1),('c',1.2),('a',1.3),('b',2.1),('b',2.5),('e',2.0),('c',1.9),('a',1.1),('c',1.5),('b',2.4),('a',1.6),('f',1.5),('a',1.7),('e',1.5),('a',1.6),('c',1.6),('f',1.4),('a',1.5),('e',2.6),('c',1.1),('c',1.5),('f',3.6),('a',1.1),('c',1.1),('c',1.2),('a',1.1),('b',2.1),('f',2.8),('f',2.3),('e',1.7),('b',2.8),('e',1.5),('f',1.2),('a',1.5),('d',3.0),('a',1.6),
	('b',2.2),('f',1.1),('b',2.3),('c',1.7),('e',1.8),('b',3.1),('a',1.2),('d',1.7),('b',2.0),('a',1.4),('e',2.2),('e',2.6),('d',1.5),('e',2.7),('b',2.8),('e',2.3),('a',1.1),('b',2.0),('d',1.4),('a',1.2),('c',1.9),('d',2.8),('f',2.5),('e',1.9),('a',1.2),('a',1.6),('a',1.3),('f',3.7),('e',1.8),('f',2.1),('e',2.1),('d',3.1),('e',2.5),('b',2.9),('a',1.5),('d',2.1),('e',2.7),('f',1.6),('e',1.6),('a',1.2),('e',1.6),('e',2.4),('b',3.1),('c',1.1),('e',2.1),('f',1.1),('c',1.4),('b',2.3),('d',2.7),('c',1.8),
	('f',1.6),('f',1.5),('b',2.9),('c',1.6),('f',3.7),('e',2.7),('d',2.8),('b',2.7),('a',1.2),('c',1.8),('c',1.8),('a',1.4),('f',2.2),('d',1.3),('a',1.4),('e',2.0),('b',2.0),('f',2.0),('d',2.8),('c',1.1),('e',2.6),('f',2.8),('b',2.3),('c',1.3),('f',2.3),('a',1.2),('b',2.7),('d',2.2),('e',2.4),('f',3.0),('f',2.3),('d',2.5),('c',1.3),('a',1.4),('e',2.5),('c',1.9),('b',3.1),('f',3.0),('a',1.4),('f',3.7),('d',2.9),('f',3.2),('d',1.2),('d',1.5),('f',2.8),('e',1.4),('f',2.9),('e',2.7),('d',1.4),('c',1.6),
	('d',2.5),('a',1.3),('a',1.4),('b',2.6),('f',2.3),('d',2.2),('c',1.3),('a',1.5),('b',2.9),('d',2.3),('e',1.9),('f',3.0),('d',2.2),('e',1.5),('d',1.9),('f',2.2),('f',1.9),('f',3.3),('e',2.5),('d',2.9),('c',2.0),('c',2.1),('e',2.0),('e',2.3),('a',1.5),('d',1.6),('b',2.3),('a',1.1),('e',2.0),('b',2.6),('c',1.1),('f',2.4),('f',1.5),('b',3.2),('d',2.7),('b',2.6),('b',2.8),('b',2.0),('f',2.2),('c',1.6),('c',1.4),('b',2.2),('a',1.7),('d',1.6),('c',1.6),('a',1.6),('f',2.4),('e',2.2),('e',2.7),('d',2.5),
	('d',2.1),('b',3.1),('f',2.9),('e',2.0),('e',2.5),('d',2.4),('e',1.8),('f',3.1),('b',3.2),('b',3.0),('a',1.6),('b',2.7),('f',3.4),('c',1.7),('d',2.6),('d',2.1),('b',2.8),('f',1.3),('d',2.6),('c',1.5),('f',1.0),('a',1.3),('d',2.4),('b',2.3),('a',1.2),('d',1.3),('c',2.0),('a',1.7),('e',1.5),('a',1.6),('e',2.4),('f',3.0),('b',3.1),('b',2.2),('f',2.9),('c',1.7),('f',1.3),('b',2.4),('a',1.2),('b',2.2),('e',1.7),('f',1.7),('f',3.0),('f',1.9),('f',1.2),('b',1.9),('a',1.4),('c',2.0),('f',2.2),('c',1.6),
	('c',1.9),('f',1.9),('a',1.7),('d',2.5),('d',2.4),('b',2.5),('d',1.9),('f',1.8),('c',2.0),('f',1.8),('d',2.2),('b',3.0),('d',1.2),('d',2.8),('b',2.8),('c',1.7),('c',1.8),('a',1.7),('b',2.7),('e',2.0),('d',3.0),('a',1.6),('d',2.1),('a',1.5),('d',1.4),('d',2.1),('a',1.2),('b',3.1),('d',1.6),('a',1.6),('e',1.7),('a',1.4),('c',1.3),('a',1.7),('b',2.4),('e',2.4),('d',1.1),('e',1.8),('c',2.0),('a',1.2),('e',2.5),('c',1.3),('b',3.1),('c',2.0),('f',3.6),('d',2.7),('e',2.7),('d',3.2),('d',2.1),('b',2.8),
	('c',2.1),('c',1.1),('c',2.1),('e',1.5),('d',2.4),('d',1.6),('b',2.1),('f',2.8),('a',1.6),('e',1.5),('f',3.5),('a',1.6),('a',1.1),('e',2.6),('b',2.4),('f',3.5),('c',1.1),('a',1.2),('c',1.4),('d',2.0),('b',3.0),('e',2.6),('d',2.2),('c',1.1),('c',1.4),('e',2.5),('f',2.3),('e',1.7),('e',1.6),('b',2.0),('d',3.2),('a',1.4),('b',2.0),('b',2.6),('b',3.0),('d',1.1),('f',1.9),('f',1.8),('e',2.6),('a',1.7),('e',2.6),('f',1.2),('e',2.2),('a',1.4),('a',1.7),('f',3.7),('c',1.0),('f',2.4),('d',1.9),('c',1.1),
	('d',1.7),('f',3.4),('f',2.9),('a',1.6),('c',1.7),('a',1.2),('a',1.4),('d',1.6),('f',2.0),('c',2.1),('e',1.6),('c',1.2),('f',2.2),('b',1.9),('a',1.5),('a',1.7),('e',1.7),('d',2.4),('d',1.5),('c',1.6),('a',1.3),('d',1.9),('a',1.4),('d',3.3),('c',1.7),('d',2.8),('e',1.8),('f',2.8),('f',1.2),('c',1.3),('e',1.9),('c',1.3),('b',3.2),('c',1.6),('f',3.3),('e',2.4),('e',1.9),('b',2.6),('b',2.9),('b',3.1),('a',1.6),('e',2.4),('d',1.1),('c',1.9),('d',2.1),('f',2.5),('b',3.1),('f',2.3),('b',3.1),('e',1.4),
]

###############################################################################
# YOUR CODE GOES BELOW THIS LINE (pretend this is the top of the file)

'''Logan McLaughlin
Homework 4: The Stereotypical Maine-themed Homework Assignment

Helps used:
"The Python return Statement: Usage and Best Practices" by Leodanis Pozo Ramos: https://realpython.com/python-return-statement/
"Python's min() and max(): Find Smallest and Largest Values" by Leodanis Pozo Ramos: https://realpython.com/python-min-and-max/
"Python spacing and aligning strings" https://stackoverflow.com/questions/10623727/python-spacing-and-aligning-strings/
"Python List sort() method" https://www.w3schools.com/python/ref_list_sort.asp
Professor Hutchinson and his incredible patience.
'''


def LocationSort(locall): #Sorts all values from data (above) into their respective locations as well as lists within a universal list known as "locall"
	a = []
	b = []
	c = []
	d = []
	e = []
	f = []
	for x, y in data:
		if x == "a":
			y = float(y)
			a.append(y)
			locall["a"]=a
		elif x == "b":
			y = float(y)
			b.append(y)
			locall["b"]=b
		elif x == "c":
			y = float(y)
			c.append(y)
			locall["c"]=c
		elif x == "d":
			y = float(y)
			d.append(y)
			locall["d"]=d
		elif x == "e":
			y = float(y)
			e.append(y)
			locall["e"]=e
		elif x == "f":
			y = float(y)
			f.append(y)
			locall["f"]=f
		else:
			print(x, y) #Troubleshoot on the off chance a value does not exist within locations a - f. I wasn't about to manually read every value to see a single fish from Location g.

def Average(loc): #Averages a list and returns the average value.
	locavg = 0 #Initializing the variable.
	n = len(loc) #This tallies up the total number of fish in the location, according to the imported location.
	for x in loc:
		locavg = float(locavg) + x #This takes each value and adds them all up.
	return (locavg / n) #This returns the average of the imported location.

def AverageSort(locall): #Takes the averages of every list, sorts them in descending order, and returns the sorted list.
	avga = (Average(locall["a"]), "a")
	avgb = (Average(locall["b"]), "b")
	avgc = (Average(locall["c"]), "c")
	avgd = (Average(locall["d"]), "d")
	avge = (Average(locall["e"]), "e")
	avgf = (Average(locall["f"]), "f")
	avgall = [avga, avgb, avgc, avgd, avge, avgf]
	avgall.sort(reverse=True) #This causes the list to be sorted in descending order. Consequently, this also causes all of the average variable tuples to be reverse-order, so they had to be initialized in reverse as well. Reversals of reversals.
	return avgall

def PrintLine(line, locall): #Prints each line beyond the first according to main().
	linelabel = "null"
	linenum = int(len(line))
	lineavg = float(Average(line))
	linemin = float(min(line))
	linemax = float(max(line))
	if line == locall["a"]:
		linelabel = "a"
	elif line == locall["b"]:
		linelabel = "b"
	elif line == locall["c"]:
		linelabel = "c"
	elif line == locall["d"]:
		linelabel = "d"
	elif line == locall["e"]:
		linelabel = "e"
	elif line == locall["f"]:
		linelabel = "f"
	else:
		print("Error in PrintLine Process. Please check variables and try again!")	#Troubleshooting error just in case a category falls beyond locations a through f.
	print(f"{linelabel:>10}{linenum:>10}{lineavg:>10.2f}{linemin:>10}{linemax:>10}")

def main():
	locall = {} #Sets up our dictionary locall or "location: all"
	locheader = {"LOCATION", "NUMBER", "AVG SIZE", "MIN SIZE", "MAX SIZE"} #I couldn't make this work as its own string with the formatting, so I made it a dictionary for the header.
	LocationSort(locall) #This takes our dictionary and runs it through LocationSort
	for x in locheader:
		print(f"{x:>10}", end="") #This takes locheader, our dictionary for all strings in the header, and prints them with the proper formatting.
	print(" ") #This is our line break once the locheader for-loop completes.
	avgall = AverageSort(locall) #This takes the averages for the fish in each location and puts all of those averages in a list for us to use as a key for our locall dictionary.
	for x, y in avgall:
		PrintLine(locall[y], locall) #This will take our avgall list, use the averages in each list to determine which lines of data to print in each sequence, and runs each list in the dictionary through our PrintLine function.


main()